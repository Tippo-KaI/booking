import dns from "dns";
import nodemailer from "nodemailer";
import Verification from "../models/verification.js";

// üß© Ki·ªÉm tra domain c·ªßa email c√≥ t·ªìn t·∫°i kh√¥ng
export const checkEmailDomain = async (req, res, next) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: "Thi·∫øu email" });

  const domain = email.split("@")[1];
  try {
    const records = await dns.promises.resolveMx(domain);
    if (!records || records.length === 0) {
      return res.status(400).json({ message: "T√™n mi·ªÅn email kh√¥ng h·ª£p l·ªá" });
    }
    next();
  } catch (err) {
    return res
      .status(400)
      .json({ message: "Email kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i" });
  }
};

// üì© G·ª≠i m√£ x√°c minh (OTP) qua email
export const sendVerificationCode = async (req, res, next) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: "Thi·∫øu email" });

  // T·∫°o m√£ OTP 6 ch·ªØ s·ªë
  const code = Math.floor(100000 + Math.random() * 900000).toString();

  // G·∫Øn t·∫°m m√£ OTP v√†o request ƒë·ªÉ s·ª≠ d·ª•ng ·ªü middleware/controller k·∫ø ti·∫øp (n·∫øu c·∫ßn)
  req.verificationCode = code;

  // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t m√£ x√°c minh v√†o MongoDB
  await Verification.findOneAndUpdate(
    { email },
    { code, expiresAt: new Date(Date.now() + 1 * 60 * 1000) },
    { upsert: true }
  );

  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: `"X√°c minh ƒëƒÉng k√Ω" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "M√£ x√°c minh ƒëƒÉng k√Ω t√†i kho·∫£n",
      text: `M√£ x√°c minh c·ªßa b·∫°n l√†: ${code}`,
    });

    console.log("‚úÖ ƒê√£ g·ª≠i m√£ x√°c minh ƒë·∫øn:", email);
    res.status(200).json({ message: "M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n" });
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i email:", error);
    return res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i email x√°c minh" });
  }
};
